#!/bin/bash

# Skrypt konfiguracji zewnƒôtrznej bazy MongoDB
# Uruchom jako: chmod +x setup-mongodb.sh && ./setup-mongodb.sh

# Kolory dla lepszej czytelno≈õci
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcje pomocnicze
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Menu konfiguracji MongoDB
show_mongodb_menu() {
    echo ""
    echo "=========================================="
    echo "  KONFIGURACJA ZEWNƒòTRZNEJ BAZY MONGODB"
    echo "=========================================="
    echo ""
    echo "1. MongoDB Atlas (Cloud)"
    echo "2. Zewnƒôtrzny serwer MongoDB"
    echo "3. Lokalna baza MongoDB"
    echo "4. Sprawd≈∫ po≈ÇƒÖczenie"
    echo "5. Testuj po≈ÇƒÖczenie"
    echo "0. Wyj≈õcie"
    echo ""
    echo -n "Wybierz opcjƒô: "
}

# Konfiguracja MongoDB Atlas
setup_mongodb_atlas() {
    echo ""
    echo "=== KONFIGURACJA MONGODB ATLAS ==="
    echo ""
    
    echo -n "Podaj connection string z MongoDB Atlas: "
    read -r atlas_uri
    
    if [ -n "$atlas_uri" ]; then
        # Sprawd≈∫ czy plik .env istnieje
        if [ ! -f .env ]; then
            cp env.example .env
        fi
        
        # Zaktualizuj MONGODB_URI
        sed -i "s|MONGODB_URI=.*|MONGODB_URI=$atlas_uri|" .env
        
        log_success "MONGODB_URI zosta≈Ç zaktualizowany"
        log_info "Sprawdzam po≈ÇƒÖczenie..."
        
        # Test po≈ÇƒÖczenia
        test_mongodb_connection
    else
        log_error "Connection string nie mo≈ºe byƒá pusty"
    fi
}

# Konfiguracja zewnƒôtrznego serwera MongoDB
setup_external_mongodb() {
    echo ""
    echo "=== KONFIGURACJA ZEWNƒòTRZNEGO SERWERA MONGODB ==="
    echo ""
    
    echo -n "Podaj adres serwera MongoDB (np. your-server.com): "
    read -r server_host
    
    echo -n "Podaj port (domy≈õlnie 27017): "
    read -r server_port
    server_port=${server_port:-27017}
    
    echo -n "Podaj nazwƒô bazy danych (domy≈õlnie ofertownik): "
    read -r database_name
    database_name=${database_name:-ofertownik}
    
    echo -n "Podaj nazwƒô u≈ºytkownika (opcjonalnie): "
    read -r username
    
    if [ -n "$username" ]; then
        echo -n "Podaj has≈Ço: "
        read -s password
        echo ""
        
        mongodb_uri="mongodb://$username:$password@$server_host:$server_port/$database_name"
    else
        mongodb_uri="mongodb://$server_host:$server_port/$database_name"
    fi
    
    # Sprawd≈∫ czy plik .env istnieje
    if [ ! -f .env ]; then
        cp env.example .env
    fi
    
    # Zaktualizuj MONGODB_URI
    sed -i "s|MONGODB_URI=.*|MONGODB_URI=$mongodb_uri|" .env
    
    log_success "MONGODB_URI zosta≈Ç zaktualizowany"
    log_info "Sprawdzam po≈ÇƒÖczenie..."
    
    # Test po≈ÇƒÖczenia
    test_mongodb_connection
}

# Konfiguracja lokalnej bazy MongoDB
setup_local_mongodb() {
    echo ""
    echo "=== KONFIGURACJA LOKALNEJ BAZY MONGODB ==="
    echo ""
    
    echo -n "Podaj nazwƒô bazy danych (domy≈õlnie ofertownik): "
    read -r database_name
    database_name=${database_name:-ofertownik}
    
    mongodb_uri="mongodb://localhost:27017/$database_name"
    
    # Sprawd≈∫ czy plik .env istnieje
    if [ ! -f .env ]; then
        cp env.example .env
    fi
    
    # Zaktualizuj MONGODB_URI
    sed -i "s|MONGODB_URI=.*|MONGODB_URI=$mongodb_uri|" .env
    
    log_success "MONGODB_URI zosta≈Ç zaktualizowany"
    log_info "Sprawdzam po≈ÇƒÖczenie..."
    
    # Test po≈ÇƒÖczenia
    test_mongodb_connection
}

# Sprawd≈∫ po≈ÇƒÖczenie z MongoDB
check_mongodb_connection() {
    echo ""
    echo "=== SPRAWDZANIE PO≈ÅƒÑCZENIA Z MONGODB ==="
    echo ""
    
    if [ ! -f .env ]; then
        log_error "Plik .env nie istnieje"
        return 1
    fi
    
    MONGODB_URI=$(grep MONGODB_URI .env | cut -d'=' -f2)
    if [ -z "$MONGODB_URI" ]; then
        log_error "MONGODB_URI nie jest ustawiony w pliku .env"
        return 1
    fi
    
    log_info "Aktualny MONGODB_URI: $MONGODB_URI"
    
    # Sprawd≈∫ po≈ÇƒÖczenie przez Node.js
    node -e "
    const mongoose = require('mongoose');
    require('dotenv').config();
    
    console.log('Sprawdzam po≈ÇƒÖczenie z MongoDB...');
    
    mongoose.connect(process.env.MONGODB_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        serverSelectionTimeoutMS: 10000
    })
    .then(() => {
        console.log('‚úÖ Po≈ÇƒÖczenie z MongoDB udane!');
        console.log('üìä Baza danych: ' + mongoose.connection.db.databaseName);
        console.log('üîó Host: ' + mongoose.connection.host);
        console.log('üö™ Port: ' + mongoose.connection.port);
        process.exit(0);
    })
    .catch((err) => {
        console.log('‚ùå B≈ÇƒÖd po≈ÇƒÖczenia z MongoDB:');
        console.log('   ' + err.message);
        process.exit(1);
    });
    "
}

# Test po≈ÇƒÖczenia z MongoDB
test_mongodb_connection() {
    echo ""
    echo "=== TEST PO≈ÅƒÑCZENIA Z MONGODB ==="
    echo ""
    
    if [ ! -f .env ]; then
        log_error "Plik .env nie istnieje"
        return 1
    fi
    
    MONGODB_URI=$(grep MONGODB_URI .env | cut -d'=' -f2)
    if [ -z "$MONGODB_URI" ]; then
        log_error "MONGODB_URI nie jest ustawiony w pliku .env"
        return 1
    fi
    
    log_info "Testujƒô po≈ÇƒÖczenie z: $MONGODB_URI"
    
    # Test po≈ÇƒÖczenia przez Node.js
    node -e "
    const mongoose = require('mongoose');
    require('dotenv').config();
    
    console.log('üîÑ Testujƒô po≈ÇƒÖczenie z MongoDB...');
    
    mongoose.connect(process.env.MONGODB_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        serverSelectionTimeoutMS: 10000
    })
    .then(async () => {
        console.log('‚úÖ Po≈ÇƒÖczenie udane!');
        
        // Test zapisu i odczytu
        const testCollection = mongoose.connection.db.collection('test_connection');
        
        try {
            // Test zapisu
            await testCollection.insertOne({ 
                test: true, 
                timestamp: new Date(),
                message: 'Test po≈ÇƒÖczenia z Ofertownik'
            });
            console.log('‚úÖ Test zapisu udany');
            
            // Test odczytu
            const result = await testCollection.findOne({ test: true });
            if (result) {
                console.log('‚úÖ Test odczytu udany');
            }
            
            // Usu≈Ñ testowy dokument
            await testCollection.deleteOne({ test: true });
            console.log('‚úÖ Test usuwania udany');
            
            console.log('üéâ Wszystkie testy przesz≈Çy pomy≈õlnie!');
            console.log('üìä Baza danych jest gotowa do u≈ºycia.');
            
        } catch (error) {
            console.log('‚ö†Ô∏è  Ostrze≈ºenie: ' + error.message);
        }
        
        process.exit(0);
    })
    .catch((err) => {
        console.log('‚ùå B≈ÇƒÖd po≈ÇƒÖczenia z MongoDB:');
        console.log('   ' + err.message);
        console.log('');
        console.log('üîß Mo≈ºliwe rozwiƒÖzania:');
        console.log('   1. Sprawd≈∫ czy serwer MongoDB jest uruchomiony');
        console.log('   2. Sprawd≈∫ czy adres i port sƒÖ poprawne');
        console.log('   3. Sprawd≈∫ czy u≈ºytkownik i has≈Ço sƒÖ poprawne');
        console.log('   4. Sprawd≈∫ czy firewall nie blokuje po≈ÇƒÖczenia');
        process.exit(1);
    });
    "
}

# G≈Ç√≥wna pƒôtla
main() {
    while true; do
        show_mongodb_menu
        read -r choice
        
        case $choice in
            1)
                setup_mongodb_atlas
                ;;
            2)
                setup_external_mongodb
                ;;
            3)
                setup_local_mongodb
                ;;
            4)
                check_mongodb_connection
                ;;
            5)
                test_mongodb_connection
                ;;
            0)
                echo "Do widzenia!"
                exit 0
                ;;
            *)
                echo "Nieprawid≈Çowa opcja. Spr√≥buj ponownie."
                ;;
        esac
        
        echo ""
        echo "Naci≈õnij Enter, aby kontynuowaƒá..."
        read -r
    done
}

# Uruchom g≈Ç√≥wnƒÖ funkcjƒô
main "$@" 